package main

import (
	"fmt"
)

func main() {
	// 1. 指针保存了值的内存地址

	// 2. 类型 *T 是指向 T 类型值的指针。其零值为 nil

	var p *int // p 是指向 int 类型的 指针

	fmt.Printf("p 的类型为: %T \n", p) // p 的类型为: *int

	fmt.Printf("p 的零值为: %v \n", p) // p 的零值为: <nil>

	// 3. & 操作符会生成一个指向其操作数的指针
	i := 42
	p = &i

	// 4. * 操作符表示指针指向的底层值
	j := *p

	fmt.Printf("p 的类型为: %T \n", p) // p 的类型为: *int

	fmt.Printf("p 的零值为: %v \n", p) // p 的零值为: <nil>

	fmt.Printf("*p 指针地址指向的值为: %v \n", *p) // p 的零值为: 42

	fmt.Printf("j 的值为: %v", j)

	// 4. 总结:
	// 4.1. & 操作符用在变量左边, 生成变量对应类型的指针 (也就是地址); (取地址 -- 变量才能取地址)
	// 4.2. * 操作符用在指针左边, 表示指针指向的底层值. (取值 -- 指针才能取值, 因为指针存的是地址)
	// 4.3. 比较容易混淆的估计就是 引用类型
}
